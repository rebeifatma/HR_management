/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addEmployee } from '../fn/empoyee-controller/add-employee';
import { AddEmployee$Params } from '../fn/empoyee-controller/add-employee';
import { deleteEmployee } from '../fn/empoyee-controller/delete-employee';
import { DeleteEmployee$Params } from '../fn/empoyee-controller/delete-employee';
import { Employee } from '../models/employee';
import { getEmployee } from '../fn/empoyee-controller/get-employee';
import { GetEmployee$Params } from '../fn/empoyee-controller/get-employee';
import { getEmployees } from '../fn/empoyee-controller/get-employees';
import { GetEmployees$Params } from '../fn/empoyee-controller/get-employees';
import { updateEmployee } from '../fn/empoyee-controller/update-employee';
import { UpdateEmployee$Params } from '../fn/empoyee-controller/update-employee';

@Injectable({ providedIn: 'root' })
export class EmpoyeeControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getEmployee()` */
  static readonly GetEmployeePath = '/api/employees/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getEmployee()` instead.
   *
   * This method doesn't expect any request body.
   */
  getEmployee$Response(params: GetEmployee$Params, context?: HttpContext): Observable<StrictHttpResponse<Employee>> {
    return getEmployee(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getEmployee$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getEmployee(params: GetEmployee$Params, context?: HttpContext): Observable<Employee> {
    return this.getEmployee$Response(params, context).pipe(
      map((r: StrictHttpResponse<Employee>): Employee => r.body)
    );
  }

  /** Path part for operation `updateEmployee()` */
  static readonly UpdateEmployeePath = '/api/employees/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateEmployee()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateEmployee$Response(params: UpdateEmployee$Params, context?: HttpContext): Observable<StrictHttpResponse<Employee>> {
    return updateEmployee(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateEmployee$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateEmployee(params: UpdateEmployee$Params, context?: HttpContext): Observable<Employee> {
    return this.updateEmployee$Response(params, context).pipe(
      map((r: StrictHttpResponse<Employee>): Employee => r.body)
    );
  }

  /** Path part for operation `deleteEmployee()` */
  static readonly DeleteEmployeePath = '/api/employees/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteEmployee()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteEmployee$Response(params: DeleteEmployee$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteEmployee(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteEmployee$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteEmployee(params: DeleteEmployee$Params, context?: HttpContext): Observable<void> {
    return this.deleteEmployee$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `addEmployee()` */
  static readonly AddEmployeePath = '/api/employees';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addEmployee()` instead.
   *
   * This method doesn't expect any request body.
   */
  addEmployee$Response(params: AddEmployee$Params, context?: HttpContext): Observable<StrictHttpResponse<Employee>> {
    return addEmployee(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addEmployee$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  addEmployee(params: AddEmployee$Params, context?: HttpContext): Observable<Employee> {
    return this.addEmployee$Response(params, context).pipe(
      map((r: StrictHttpResponse<Employee>): Employee => r.body)
    );
  }

  /** Path part for operation `getEmployees()` */
  static readonly GetEmployeesPath = '/api/employees/';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getEmployees()` instead.
   *
   * This method doesn't expect any request body.
   */
  getEmployees$Response(params?: GetEmployees$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Employee>>> {
    return getEmployees(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getEmployees$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getEmployees(params?: GetEmployees$Params, context?: HttpContext): Observable<Array<Employee>> {
    return this.getEmployees$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Employee>>): Array<Employee> => r.body)
    );
  }

}
